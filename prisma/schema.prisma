// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  teams     Team[]   // User owns teams
}

model Team {
  id              String   @id @default(cuid())
  name            String
  sleeperRosterId String?  // Link to Sleeper roster
  ownerId         String   // User who owns this team
  leagueId        String   // League this team belongs to
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  league  League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@unique([ownerId, leagueId]) // User can only have one team per league
  @@unique([sleeperRosterId, leagueId]) // Roster can only be claimed once per league
}

model League {
  id              String   @id @default(cuid())
  name            String
  description     String?
  sleeperLeagueId String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relationships
  teams           Team[]         // League contains teams
  awardCustomizations AwardCustomization[] // League can customize award names
}

// Default award types that can be customized per league
model AwardType {
  id          String   @id // matches JSON keys like "fewestPointsAgainst"
  name        String   // Default name like "The Easy Day"
  description String   // Description of what the award is for
  icon        String   // Emoji icon
  category    String?  // Optional category for grouping
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  customizations AwardCustomization[] // This award type can be customized by leagues
}

// League-specific award customizations
model AwardCustomization {
  id           String   @id @default(cuid())
  leagueId     String   // Which league this customization is for
  awardTypeId  String   // Which award type is being customized
  customName   String   // Custom name for this award in this league
  customIcon   String?  // Optional custom icon
  isActive     Boolean  @default(true) // Whether this award is enabled for the league
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relationships
  league       League    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  awardType    AwardType @relation(fields: [awardTypeId], references: [id], onDelete: Cascade)
  
  @@unique([leagueId, awardTypeId]) // One customization per award type per league
}
